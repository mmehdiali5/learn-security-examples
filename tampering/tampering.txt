1) Briefly explain the vulnerability and why the secure version prevents the vulnerability.
The vulnerability in the provided code that leads to a cross-site scripting (XSS) attack is in the /register route where the user input is directly inserted into the HTML without proper escaping.

When the string <script> document.body.innerHTML = "<a href='https://google.com'> Gotcha </a>"</script> is entered into the form input and submitted, it becomes part of the HTML response generated by the server. This string contains a <script> tag, which is executed by the browser when the response is rendered on the client side.

So, when the user submits the form with the malicious input, the server stores this input in the session as the user's name without any sanitization. Then, when the user returns to the home page, the server renders the home page with the user's name inserted directly into the HTML without any escaping. As a result, the <script> tag included in the user's name is interpreted as HTML and executed by the browser, causing the XSS attack.

To prevent this vulnerability, the server should properly escape user input before inserting it like using escapeHTML used in secure.js.

2) Which CIA property does tampering violate?
In this scenario, the XSS attack allows an attacker to inject malicious scripts into the web application, which can then be executed in the context of other users' browsers. This malicious script can potentially access sensitive information stored in the user's session, such as session tokens or personal data, and exfiltrate it to a malicious third party without the user's knowledge.

Confidentiality is breached because the attacker gains unauthorized access to confidential information that should only be accessible to authorized users. In this case, the attacker can access the session data of other users, compromising the confidentiality of their session information.